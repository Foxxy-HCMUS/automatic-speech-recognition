Speaker 0: Hello, everyone.  Welcome back to another round of Turing Mock Interviews.  I am José and I'm a tech leader at Turing.  I'm from Montreal, Canada, and at Turing, I work on the hiring team, helping them to hire the best engineers by helping with the vetting process.  I have more than seventeen years of experience and my expertise lies in JavaScript.  Today, I will be interviewing Victor for the role of an experienced Node.js developer.  Let's hear from Victor.  Hello, Victor.  How are you doing and how is your day doing so far?  Hi, Guilci.

Speaker 1: I'm doing good.  How are you, too?

Speaker 0: I'm doing great.  So thanks for asking.  So could you please introduce yourself and tell me a little bit about your experience, your past project and what kind of language framework have you been working with?  And then I can take from there.

Speaker 1: Yes, I am Victor.  I'm from Nigeria.  I am a full stack developer.  I've been developing for about six years now.  I started my journey into the tech world by working as a backend developer.  I had started writing Python and Django framework.  At the time I was building, deploying machine learning models to the web using Django.  After two years down my career, I joined a fintech company.  In the company, I picked up JavaScript and started writing Node.js and React.  I was responsible for building various financial APIs and dashboard internal tools to help my colleagues work.  Fast forward five years from then, I have been working steadily with JavaScript and Node.js, and consequently, JavaScript and Node.js are my strengths.  Thank you.

Speaker 0: Nice.  All right.  So you can see that you have worked hard to be here today, right?  So Python, Django, React.js, and Node.js, right?  So you'll never get out of job for sure.  I can't.  Yeah.  All right.  Okay.  So I see you have a lot of experience with back-end, front-end, Python, Django, Node.js, React.js.  This is quite a lot.  Okay.  So first of all, which one do you prefer?

Speaker 1: Wow, yeah, that's a tricky question for me, but I would do well to answer it.  So I started writing Python and kind of fell in love with Python.  However, over the years, I've used more production applications using JavaScript and .  So if I were building some fun projects just for myself, I would maybe pick Python.  But if I wanted to come up, hit the ground fast, and build something that works, that would be deployed in production, I would always reach out for NewJS, React and JavaScript essentially.  So in a way I would say JavaScript.

Speaker 0: That's it.  That's a smart answer because this position is for JavaScript, right?  If you say Python, okay, so you're not going.  Okay, I'm kidding, I'm kidding.  All right, so could you please tell me, let's see, could you please tell me or describe a few projects or, I mean, the best project that you have been, that you work with JavaScript, for example?

Speaker 1: All right, so outside the project I worked with I worked on why I was working in the fintech company.  so here's the problem statement.  The company has a source bank account and the company has a multiple destination bank account.  Over time, money comes into the company from the source bank account into the source bank account, but then, in order to help.  to perform transaction, money has to move into the destination's bank account at specific time and in specific percentages.  So I was tasked to build an API that would be controlled by a dashboard that I also built that would enable the users customize how much percentage of money would go from the source bank account to various um destination bank account and also they would also be able to control how frequently um funds is deducted from the source account to destination account.  so the project involved me writing background jobs using luchas and also ready for caching and all that.  so it was a very fun project.  i went about scheduling jobs and cleaning up jobs and all.  yeah so that was it.

Speaker 0: nice nice good to mention that good mention red is node.js.  uh okay so let's get it started.  okay um this is really interesting project and i see you have a great background.  okay uh let's go to the node.js questions.  okay all right.  um i would like to ask you okay for example uh node.js.  for first.  first of all node.js is single thread or multi application.

Speaker 1: it's a single javascript is a single traded language, however, node.js allows javascript to be able to run.  However, node.js kind of augments the fact that javascript is single traded by providing an event.  so while javascript is single traded, you can run, you can perform concurrent operations using node.js.  node.js and the event loop right and yes node.js and the event loop.

Speaker 0: so yeah okay great that's a good answer.  well what else?  uh if as you mentioned node.js is a single thread okay application uh it goes to one single core and stay there forever right until we reset it.  my question for you is how can we make node.js or multi-threading or simulate multi-threading with node.js?

Speaker 1: Yeah, so Node.js comes with a tool called fork.  So generally, a fork is used to spawn shared processes.  In Node.js, it is used to create a new instance of the VEAD engine to run multiple workers to execute code.  So by creating a fork, Node.js can spread these operations via the multiple workers on the various cores of the host machine.

Speaker 0: essentially yeah kind of yeah.  yeah no no that that's that's okay.  yeah i kind of that.  and uh um have you ever heard about v-eight engine?

Speaker 1: yes i have.  it's one of the javascript engines provided by google nice.

Speaker 0: and why node.js uses v-eight.

Speaker 1: so um essentially when via engine is an option is an open source engine within in C++ and developed by Google.  it runs in Google chrome, unlike other engines, it is.  also utilized for Pop!  One Node.js runtime.  So VH was initially intended to improve the speed of JavaScript execution within browsers.  Instead of employing an interpreter, VH converts JavaScript code into more efficient machine code to increase performance.  It turns JavaScript code into machine code during execution by utilizing just-in-time compiler.  So, um, in order to run JavaScript on the server side, uh, with, um, on the server side, speed is essential.  and with VH, JavaScript, uh, with VS just in time compilation, JavaScript can be run faster on the server side.  And that's why Node.js uses VH.

Speaker 0: Cool.  Thank you for this answer.  Let's see.  Let's see.  So you mentioned the event loop Node.js, okay?  Could you explain to me what is the event loop?

Speaker 1: Yes.  So the event loop is what allows Node.js to perform non-blocking IEO operations.  So despite the fact that JavaScript is single-threaded, Usually, by affording operations to the system kernel whenever possible.  Since most kernels are multi-threaded, they can have multiple operations executed in the background.  When one of these operations completes, the kernel tells Node.js so that the appropriate callback can be added to the POQ.  Essentially, the event loop is the mechanism through which Node.js uses a single traded language of JavaScript to still perform multiple operations.  That's it.  And in the event loop, there are different phases.  I could go on and elaborate about it.

Speaker 0: Yeah, I'm good.  I'm good.  I'm good with this.  Yeah.  This kind of question is just to know.  if you are familiarized with the engine with Node.js, you know, yeah.  Okay, this one is a classic question, okay, classic Node.js question that you'll be asking a lot during the interview like this.  My question is, what do you understand about callbacks?

Speaker 1: All right, so callbacks are a way of, in Node.js, a way of performing an operation asynchronous with the callbacks essential functions that are passed into um another function or any other asynchronous process to be called at the later time and that time is usually indeterminate.  um but um.  so the callback those functions are registered with event loop and at the later time they will be called nice.

Speaker 0: and have you ever heard about callback health?

Speaker 1: Yeah, callback health is a problem that arises usually when developers try to implement asynchronous processes one after the other.  So there are lots of ways to solve callback health.  More recently, you could use async-await, but the general strategy is modularization.  you can break up callbacks into independent functions and another strategy is to use a control library that is like async.  or however more recently you can use the new escs feature async await.  another way of reducing or eliminating callback here is to use a javascript generators with promises nice generators nice all right great answer all right.

Speaker 0: so um let's see uh what kind of framework uh have been used with node.js?

Speaker 1: yeah i'm familiar with a couple of frameworks.  with node.js um i've used.  i've worked with express i've worked with core i've also worked with nest.js.  Those are essentially the ones that I've worked very much with and quick proficiency in.

Speaker 0: Nice.  Okay, great.  That's great.  What's the difference between ExpressJS and NestJS, for example?

Speaker 1: So XpressJS is a framework on Node.js, just like NestJS.  However, XpressJS is more world-level.  It gives you more exposure to the internal workings of James Forrest, Norcal PTACC, Norcal PTACC, Not just have no just call library and also, it is not it's on opinionated so.  James Forrest, Norcal PTACC, Norcal PTACC, Whereas messages is the higher level framework, which can also be used with messages or classify messages is more opinionated and introduces advanced concept like dependency injection and.  has some certain ideas or opinion on how to structure your code.  NestJS should be prioritized or should be used in where you want to build a very large application and you want to achieve structure and the code that would be maintainable over time.  However, if you want something quick and small, I would go with ExpressJS.

Speaker 0: Okay, great.  You mentioned dependency injection.  Okay, what's dependency injection?

Speaker 1: So dependency injection is a mechanism that allows the framework to be able to identify certain tokens or services that have been pre-configured in the code and inject it into other services in runtime.  So instead of the writing manual code to instantiate objects and pass it to various functions, the developer can more or less write the services and the functions and then the dependency injection engine would take appropriate classes and instantiate with an instance of it at the time when it needs it and so in that sense it makes the code a bit more declarative and instead of imperative.  so it's also a medium for for allowing you to write more decoupled codes.

Speaker 0: Nice.  Okay.  All right.  And let's see.  What do you understand about streaming in Node.js?

Speaker 1: Streaming.  So streaming is a way of managing data or passing or working with data that allows data to be processed without being read completely into the memory.  For example, if you have a large collection of data, it might not be pragmatic to read all the data into memory before processing it.  But when you employ streaming, you can read the data chunk by chunk and process small chunks at a time.  In that way, you can circumvent the memory constraint of the system.  So, Node.js, many of the Node.js core libraries like the event emitters are built around streams.

Speaker 0: Okay, great.  I'm glad that you mentioned event emitters.  So, what are event emitters?  What do you understand about event emitters?

Speaker 1: So, event emitters are a way of writing... Okay, in the situations we have used event emitters, event emitters are used to write more decoupled codes.  So essentially, the way it works, there is an event is dispatched, and there is a listener function that is registered with that event.  So whenever an action happens and an event is dispatched, all the waste in us, which are just functions registered to the event are executed.  So from a programmer's perspective, it can allow you to write code that is decoupled.  Let's say you want to communicate across services without having to import all the implementation detail of one service into another file, you can use event emitters to communicate synchronously.

Speaker 0: And what's the difference between event emitters and publisher and subscriber design pattern?

Speaker 1: So event emitters, there are more similarities than there are differences.  However, what I would say is for publisher and subscriber design pattern, there needs to be an established topic in which all publishers will publish to, then the subscribers will be registered on the same topic and listening for messages coming from that topic.  That's my understanding.  But yeah and then also the use cases kind of present some differences.  so but we just describe a pattern.  most times can be used across.  Various services across the across http protocol, whereby we have this script publisher and one service, and this is quite by another service, however, event emitters.  their scope of communications is limited within the same local service.  so maybe you have one service in one file and you want to publish an event to another service another file.  so that's my understanding.

Speaker 0: makes sense yeah makes sense all right.  so uh what kind of database are you familiar with?  node.js?  i mean not with node.js at all.  uh what kind of days are you familiar with?

Speaker 1: So I've worked with PostgreSQL and I've worked with MongoDB.  However, I would say I'm more familiar with MongoDB than PostgreSQL with Node.js.  So while working with PostgreSQL with Node.js, most of the time I've used the OLMs, object relational mappers.  However, and also while working with Mongo, I used the Mongo's ODM object data mapper.  So in terms of proficiency, MongoDB is where I'm more proficient at.

Speaker 0: In your understanding, what's the difference between MongoDB and PostgreSQL?

Speaker 1: All right, a major difference between mongodb and postgres is the fact that mongodb is, or rather postgres is a relational database, meaning that it stores data in a structured form in tables that have rows and columns.  However, mongodb is a non-relational database, oftentimes it is also called a new SQL database.  There's some of the differences also between the two come from the fact that there's a standard query language for querying Postgres.  That's why Postgres is also for an SQL database.  And whereas MongoDB allows stores this information in key data and I mean, key value pairs.  So in summary, Postgres is a relational database that stores its information in tables in a more structured form.  MongoDB stores its information in a key-value pair, which allows it doesn't have much of structure, but it's more flexible.

Speaker 0: I'm going to ask you a few questions related to SQL database and non-SQL database.  in the end, okay?  But for now, I'd like to ask you if you, do you have any experience with WebSockets?

Speaker 1: Yes, I have some experience with WebSockets.  Maybe not in a full-scale experience, but I have used some projects with WebSockets, so I can attempt questions in WebSocket.

Speaker 0: Nice what's the difference between one application that use web sockets to communicate with the back end and one application that use restful api's to do the same.

Speaker 1: So generally web sockets are used when you want to and.  build real time features on a server.  So usually RESTful API works with a request response cycle, meaning that for a server to send information to the client, the client has to first of all, make a request.  But with WebSocket, you kind of introduce a dual method of communication, meaning the client can make a request to the server, and the server, at any time it has data, can push data to the client without the client having to initiate the request.  So with that ability, a real-time application can be built, and WebSocket enables this ability, provides this ability to servers.

Speaker 0: Great.  And do you have experience with GraphQL?

Speaker 1: Yes, I've had some experience with GraphQL.  Yes.

Speaker 0: Okay.  How would you describe GraphQL?  What's GraphQL?

Speaker 1: So GraphQL can be, I can describe or exemplify GraphQL by making some comparison with ETH and REST.  So essentially GraphQL was introduced to augment some of the deficiencies of REST framework.  So usually the RESTful framework endpoints are defined ahead of time, payloads that endpoint are defined ahead of time and the response, the shape of the response from the rest to API defined ahead of time with minimal flexibility.  But with GraphQL, you're provided an interface in which a client can query the server with varied payload and can get varied response.  so in a situation where the client wants to just get enough data that it needs it will not be over with it with too much data.  and when a client wants to request for maybe data involving various resources with a single endpoint and with a single query the server the client can make that request.  so essentially GraphQL makes up for RESTful API in terms of introducing flexibility of queries and also decreasing the amount of information that is transferred by the network by allowing the client to specify exactly what he needs and what he doesn't need.

Speaker 0: essentially great great all right.  so um we gotta come to the end.  okay before i ask you a few more questions i just like to give uh uh heads up for our fellow developers that are watching this video.  okay so if you are looking for jobs okay uh job opportunities.  i recommend you to go to the website student.com.  slash jobs.  okay you can find jobs by your tech stack And once you find them, so all you need to do is just create your account if you don't have one.  OK, and pass through the vetting process once you pass.  So you find a job as a victor as I did.  OK.  And then you start working one hundred percent remotely from the country that you want.  OK.  Any place in the world.  Okay, let's go.  Let's just come back for Victor.  But before that, if you enjoyed this content, just consider giving us the big thumbs up and commenting down below.  What is your tech stack?  Okay.  And what kind of job are you looking for?  Okay, Victor.  So we're coming to the end.  Okay.  I just have a few more questions for you.  So how do you keep yourself up to date with Node.js?

Speaker 1: All right.  So first of all, I have a Medium account and I have daily subscriptions.  So with Medium, you can subscribe to some channels to give you some daily doses of articles written in your favorite stack.  For me, I subscribe to Node.js updates.  So every morning I check my email for the daily dose of Node.js, I read some articles.  just to find out what's more recent.  Then sometimes I occasionally go to the NPM website and just browse for packages to see what is currently being developed by the various, by the community.  Then oftentimes I also take some courses, some professional courses to improve my skills in Node.js.  And then finally, this might sound obvious, but I want to emphasize it.  Just keep practicing, and especially targeted practice.  Whenever I realize that I have some deficiencies or some struggles in a particular area of Node.js, I go to the Node.js documentation.  I try to implement projects that would task my knowledge on such concepts.  So over time, I get better at Node.js.  And then there's always room for improvement in JavaScript, because even though Node.js is not exactly JavaScript, even though Node.js is more than JavaScript, getting stronger or better in JavaScript would definitely improve your skills in Node.js.  So those are a few tips that I use to improve my Node.js and JavaScript in general.  Thank you.

Speaker 0: Great, Victor.  Thank you.  It was really nice to speak with you today.  And to everybody else, thank you for attending this mock interview with us again, and hope you enjoyed this video as much as I did.  And we'll be back very soon with more episodes like this for any tech stack.  Please comment below what tech stack would like to cover.  that we cover.  We can create mock interview for that.  and then you can prepare yourself better for this kind of interview.  okay uh please drop your suggestions comments hit the like button subscribe to touring's uh.  youtube channel and don't forget to.  uh don't forget to to give us the big fat thumbs up for this video if you enjoyed this content.  okay take care stay safe wash your hands and happy coding.
